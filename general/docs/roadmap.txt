org.lamport.tla.toolbox.tool.tlc.ui
 ui/editor
  ModelEditor 
    Sets up the Model Editor, including its pages.  The individual
    pages are set up by the  
      MainModelPage, AdvancedModelPage, and ResultPage;

   loadData() initializes the editor.  
   validate() is called through some plug-in magic whenever 
     the spec is parsed (but probably only if the parse is correct)
     and probably when the user has made some change in the model editor.
     It is also run when the model editor is initialized.

Various pieces of code are notified when the spec is opened, parsed,
and closed by listeners registered to the extension point
org.lamport.tla.toolbox.spec of the plugin org.lamport.tla.toolbox.
This extension point interacts via a class that extends the class
SpecLifecycleParticipant.  So, finding all classes that extend this
should permit one to find every place that gets notified when the spec
is opened, closed, or parsed.  However, this is all done by so many 
levels of indirection that we have not succeeded in doing this.
For example, ModelEditor.validate() is called when the module is parsed,
and this must be through that extension point.  But we have not discovered
the path from the extension point to that method.

-------

The spec status indicator in the lower-right corner is apparently
set by  ParseStatusContributionItem . update().


----------
How to create a distribution.

Go to org....product.standalone
   This contains no functionality, but "builds application stuff".
   
The following stuff needs to be done just once for each computer.
   
Open standalone.product / Overview tab
  Need to specify target platform.
  By default, Eclipse uses itself as the target
     platform.
  Need to define a separate copy of the distribution
    as the target platform.
  
 
 1. Unzip Eclipse platform from eclipse-rcp-galileo-win32.zip into somewhere as the
     the target platform.  I've put it in tla/target-platform
 
 2. Go to Eclipse download page, download 
     Eclipse delta pack.  Usually in
     "Other Downloads".  (search for "delta")
     Extract it to a new directory.  I've put it in tla/delta-pack, merging
     with the stuff extracted above. 
     
 3. Go to Window/ preferences/Plug-in Development/Target Platform
    
   Hit Add.
   Choose "nothing" & hit next
   In Target Contact
     Enter name, like "Galileo 3.5"
     Location hit add:
        select Installation & hit next
        Select target-platform directory .../tla/target-platform/eclipse 
          and hit finish [included 487 of 487]
     Hit add again
       select Directory and hit next
       select .../delta-pack/eclipse directory and hit
          finish [61 of 61]
     Hit finish.
  Check "Galileo 3.5" in Target Platform to make it active.
  Hit OK, and watch it rebuild.
       
The following stuff needs to be done for each release.

  1. Open standalone product / overview page
  2. Hit on Eclipse Product Export Wizard
  
-----------------------------------------------------------------------------
HELP

INTRO
Intro page in : org.lamport.tla.toolbox.product.standalone / intro/root.xhtml.
   Source page for each topic is in org.lamport.tla.toolbox.product.standalone /intro/*.xhtml
   Each such topic page has an href link whose id field must be registered (linking
       it to the page) by adding the appropriate stuff to 
       org.lamport.tla.toolbox.product.standalone /intro/introContent.xml
       
ATTACHING A PAGE TO THE HELP BUTTON

org.lamport.tla.toolbox.editor.basic/helpContexts.xml contains a <context> entry with
 id "main_editor_window" : 
   	<context id="main_editor_window">
		<description>This is a the basic editor. It is used to edit the TLA+ module files.</description>
		<topic label="Understanding Problems" href="../org.lamport.tla.toolbox.doc/html/reference/maintopic.html" />
	</context>
   
The constructor of TLAEditor contains
  setHelpContextId("org.lamport.tla.toolbox.editor.basic.main_editor_window");
  
 org.lamport.tla.toolbox.editor.basic/plugin.xml contains this relevant extensions:
 
   <extension
         point="org.eclipse.help.contexts">
      <contexts
            file="helpContexts.xml"
            plugin="org.lamport.tla.toolbox.editor.basic">
      </contexts>
   </extension>
 
PUTTING A PAGE IN THE TABLE OF CONTENTS
 
To add a top-level section in the toc, add something like

   <topic label="Concepts">
      <anchor id="concepts"/>
   </topic>
   
to  org.lamport.tla.toolbox.doc/toc.xml .  The label is the toc entry.  The anchor
is used to attach things to that entry.  Also, add to 
org.lamport.tla.toolbox.doc/plugin.xml  the indicated <toc> ... </toc> entry:

  <plugin>
   <extension
         point="org.eclipse.help.toc">
      ...
      <toc
            file="tocconcepts.xml">
      </toc>
      ...
   </extension>
  </plugin>

Subtopics are attached in
    org.lamport.tla.toolbox.doc/tocconcepts.xml, which contains
    
    <toc label="Concepts" link_to="toc.xml#concepts"> 
	<topic label="Model"  href="html/concepts/model.html"> 
	</topic>
	<topic href="html/concepts/specification.html" label="Specification">
	</topic>
    <topic href="html/concepts/module.html" label="Module">
    </topic> 
   </toc>

The toc label seems to be irrelevant.  The topic labels specify the TOC subtopics.

To get a subtopic, put a <topic label=... href=... /> inside a topic



ATTACHING A HELP BUTTON TO AN EDITOR/PAGE/DIALOGUE    

The help button on the Eclipse plug.xml editor uses lines 82-91 of
PDEFormPage class in package org.eclipse.pde.internal.ui.editor to attach the button.
This was found by trying  Shift-Alt-F1 on the page in the Eclipse editor and going to
the ExtensionsPage, which extends PDEFormPage.

--------------------------------------------------------------
GETTING NOTIFIED WHEN A MODULE IS SAVED

When a module is saved, the performSave() of the org.tla.toolbox.editor.basic.TLAEditor object
is called.  There's a default method in a superclass, but one can override it to
do whatever else you want to do on a save.  There's also a performSaveAs() method.


