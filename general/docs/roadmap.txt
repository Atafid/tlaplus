To find the methods that Eclipse is using to implement something:
   Alt-Shift-F1:
     Brings up information about active editor of view or dialog.
   Alt-Shift-F2 + click on menu & click on menu item:
     Brings up information about implementation of some menu items.
     
org.lamport.tla.toolbox.tool.tlc.ui
 ui/editor
  ModelEditor 
    Sets up the Model Editor, including its pages.  The individual
    pages are set up by the  
      MainModelPage, AdvancedModelPage, and ResultPage;

   loadData() initializes the editor.  
   validate() is called through some plug-in magic whenever 
     the spec is parsed (but probably only if the parse is correct)
     and probably when the user has made some change in the model editor.
     It is also run when the model editor is initialized.

Various pieces of code are notified when the spec is opened, parsed,
and closed by listeners registered to the extension point
org.lamport.tla.toolbox.spec of the plugin org.lamport.tla.toolbox.
This extension point interacts via a class that extends the class
SpecLifecycleParticipant.  So, finding all classes that extend this
should permit one to find every place that gets notified when the spec
is opened, closed, or parsed.  However, this is all done by so many 
levels of indirection that we have not succeeded in doing this.
For example, ModelEditor.validate() is called when the module is parsed,
and this must be through that extension point.  But we have not discovered
the path from the extension point to that method.

-------

The spec status indicator in the lower-right corner is apparently
set by  ParseStatusContributionItem . update().


----------
How to create a distribution.

Go to org....product.standalone
   This contains no functionality, but "builds application stuff".
   
The following stuff needs to be done just once for each computer.
   
Open standalone.product / Overview tab
  Need to specify target platform.
  By default, Eclipse uses itself as the target
     platform.
  Need to define a separate copy of the distribution
    as the target platform.
  
 
 1. Unzip Eclipse platform from eclipse-rcp-galileo-win32.zip into somewhere as the
     the target platform.  I've put it in tla/target-platform
 
 2. Go to Eclipse download page, download 
     Eclipse delta pack.  Usually in
     "Other Downloads".  (search for "delta")
     Extract it to a new directory.  I've put it in tla/delta-pack, merging
     with the stuff extracted above. 
     
 3. Go to Window/ preferences/Plug-in Development/Target Platform
    
   Hit Add.
   Choose "nothing" & hit next
   In Target Contact
     Enter name, like "Galileo 3.5"
     Location hit add:
        select Installation & hit next
        Select target-platform directory .../tla/target-platform/eclipse 
          and hit finish [included 487 of 487]
     Hit add again
       select Directory and hit next
       select .../delta-pack/eclipse directory and hit
          finish [61 of 61]
     Hit finish.
  Check "Galileo 3.5" in Target Platform to make it active.
  Hit OK, and watch it rebuild.
       
The following stuff needs to be done for each release.

  1. Open standalone product / overview page
  1a. Select New button next to Product: and set
         Application to org.lamport.tla.toolbox.application      
        
  2. Hit Synchronizing on the Testing section
  3. Hit on Eclipse Product Export Wizard
     (export to windows, linux stk/x86, macosx cocoa/x86)
-----------------------------------------------------------------------------
How to put a new version up on the MSR-INRIA Web site.

1. Go to the web site's project page.
2. Login
3. Select "contents", right-click on the html release page, and open it.
4. Select edit, and choose "html" on the editing panel to get a reasonable
   format.
5. Make any necessary changes to the page and save them.
6. Go back to the "contents" page and use it to upload the new versions.
   They will appear in the same directory as the html page, with the
   name by which they were uploaded.
7. If you created a new file, go to Properties and click the box that
   makes it not appear in the navigation pane.  Save.

The current preliminary release web page is reachable from the outside
world at:

http://www.msr-inria.inria.fr/Projects/tools-for-formal-specs/preliminary-release/

------------------------------------------------------------------------------
HELP

INTRO
Intro page in : org.lamport.tla.toolbox.product.standalone / intro/root.xhtml.
   Source page for each topic is in org.lamport.tla.toolbox.product.standalone /intro/*.xhtml
   Each such topic page has an href link whose id field must be registered (linking
       it to the page) by adding the appropriate stuff to 
       org.lamport.tla.toolbox.product.standalone /intro/introContent.xml
       
ATTACHING A PAGE TO THE HELP BUTTON

org.lamport.tla.toolbox.editor.basic/helpContexts.xml contains a <context> entry with
 id "main_editor_window" : 
   	<context id="main_editor_window">
		<description>This is a the basic editor. It is used to edit the TLA+ module files.</description>
		<topic label="Understanding Problems" href="../org.lamport.tla.toolbox.doc/html/reference/maintopic.html" />
	</context>
   
The constructor of TLAEditor contains
  setHelpContextId("org.lamport.tla.toolbox.editor.basic.main_editor_window");
  
 org.lamport.tla.toolbox.editor.basic/plugin.xml contains this relevant extensions:
 
   <extension
         point="org.eclipse.help.contexts">
      <contexts
            file="helpContexts.xml"
            plugin="org.lamport.tla.toolbox.editor.basic">
      </contexts>
   </extension>
 
PUTTING A PAGE IN THE TABLE OF CONTENTS
 
To add a top-level section in the toc, add something like

   <topic label="Concepts">
      <anchor id="concepts"/>
   </topic>
   
to  org.lamport.tla.toolbox.doc/toc.xml .  The label is the toc entry.  The anchor
is used to attach things to that entry.  Also, add to 
org.lamport.tla.toolbox.doc/plugin.xml  the indicated <toc> ... </toc> entry:

  <plugin>
   <extension
         point="org.eclipse.help.toc">
      ...
      <toc
            file="tocconcepts.xml">
      </toc>
      ...
   </extension>
  </plugin>

Subtopics are attached in
    org.lamport.tla.toolbox.doc/tocconcepts.xml, which contains
    
    <toc label="Concepts" link_to="toc.xml#concepts"> 
	<topic label="Model"  href="html/concepts/model.html"> 
	</topic>
	<topic href="html/concepts/specification.html" label="Specification">
	</topic>
    <topic href="html/concepts/module.html" label="Module">
    </topic> 
   </toc>

The toc label seems to be irrelevant.  The topic labels specify the TOC subtopics.

To get a subtopic, put a <topic label=... href=... /> inside a topic



ATTACHING A HELP BUTTON TO AN EDITOR/PAGE/DIALOGUE    

The help button on the Eclipse plug.xml editor uses lines 82-91 of
PDEFormPage class in package org.eclipse.pde.internal.ui.editor to attach the button.
This was found by trying  Shift-Alt-F1 on the page in the Eclipse editor and going to
the ExtensionsPage, which extends PDEFormPage.

--------------------------------------------------------------
GETTING NOTIFIED WHEN A MODULE IS SAVED

When a module is saved, the performSave() of the org.tla.toolbox.editor.basic.TLAEditor object
is called.  There's a default method in a superclass, but one can override it to
do whatever else you want to do on a save.  There's also a performSaveAs() method.

------------------------------------------------------------
ASSIGNMENT OBJECTS AND WIZARDS

An assignment object:
 - Is used for constant assignments and for definition overrides.
 - For the constant assignments, it is constructed by the loadData
   method of MainModlePage in the call of
   FormHelper.setSerializedInput, which puts it into the TableViewer
   MainModelPage.constantTable

The user can edit an Assignment object with an AssignmentWizard.  When
he clicks on the Add or Edit button of the Constant Assignments
section, it will create an AssignmentWizard.

The button is added in the ValidateableTableSectionPart object (the
super for Validateable...), and fSelectionListener is added to it.
Note that the doAdd and doEdit methods are overridden by the methods
in the subclass ValidateableConstant.  These methods call
doEditFormula, which creates the AssignmentWizard.

(See www.eclipse.org about dialogs and wizards)

The AssignmentWizard has two AssignmentWizardPages that are created in
the addPages() method.  In AssignmentWizardPages there is the
createControl method, which is called when the page is added to the
Wizard.  Note: createControl is constructing the widgets that form the
wizard page.  They are children of container, which is a child of the
parent argument.  The last line, setControl(container), sets the
container as the control associated with the wizard page.

To implement the help button on the dialog, we need to set the help on
the container.


-------------------------------------------------------------------
Explanation of various items in no particular order by DR

SANY is executed in the private method parseModule in
ModuleParserLauncher.  This method is the place to access all modules
that are ever parsed.  The method itself will not necessarily be
called on every modules that is parsed, but within the method, an
Enumerate object is generated by the SANY java code.  This object
contains all modules that were ultimately parsed because SANY parsed
the module for which parseModule() is called.  These modules are
either extended or instanced by the module for which parseModule() is
called.

There is a good explanation of resource change listeners in the
article "How You've Changed!" on www.eclipse.org/articles.  In short,
the method resourceChanged in any implementation of a resource change
listener is called when a resource change event for which that
listener is registered occurs.  That method can access an
IResourceDelta tree which gives all resources in the workspace that
have changed.  This tree can be traversed using an implementation of
IResourceDeltaVisitor.

ParserDependancyStorage gives access to all user modules that are
relevant to the spec based on the most recent parse.  If the most
recent parse resulted in an error, then ParserDependancyStorage will
not contain the modules on which the root module depends or the root
module itself.  This makes sense because without a successful parse,
it cannot be determined on which modules the root module depends.

An IResource is the class that represents a resource in the
workspace.  There is a good explanation of resources in the Eclipse
Help Platform Plug-in Developer Guide Programmer's Guide.  A IResource
allows setting persistent and session properties.  Persistent
properties will last over startup and shutdowns of the toolbox while
session properties will be erased when the toolbox is shut down.
Right now, the time of the last build for a resource is set as a
persistent property in the private parseModule method in
ModuleParserLauncher.

The basic principle behind designing the widgets in the toolbox is to
have three components: a viewer, a content provider, and a class
that represents the data to appear.  The viewer does not know how the
data is represented that it is to present.  The content provider takes
instances of the class (Assignment for example) that represents the
data and adds it to the viewer.  An ILabelProvider is used to
determine how these instances are displayed in a viewer.

-------------------------------------------------------------------
INDEX TO USEFUL COMMENTS IN THE CODE

Open Declaration Command 
  Its implementation is described in TLAEditor$OpenDeclarationHandler.
  This also describes the implementation of hyperlinks displayed by
    holding Control key and moving over the module.
  
Attaching a Listener to Something
  The implementation of the graphing of columns of the "State space 
  progress" section of the Model Checking Results page adds the listeners 
  in ResultPage.createTableColumns.  The listener and interesting
  stuff is documented in ResultPageColumnListener subclass of 
  ResultPage.

