TLA+ Error Reports That Can Be Mapped to PCal Code
---------------------------------------------------
- Parser Errors

- TLC errors. Expression evaluation in:
   * Initial predicate   
       This seems to just report a single location,
       exactly where the error occurs.
   * process set. (sometimes reports the ProcSet token,
       sometimes it reports no location)
   * expression in statement: can be
      + the expression
      + conjunct of action containing the expression
      + a previous conjunct of that action
      + the last character (and perhaps more) of 
        the first conjunct of that action.
        This seems to be a minor TLC bug

- Error-Trace action location.
  (Double-click needed to go to TLA+ location.)

- Coverage.  Can go to
   * conjunction of action definition
   * variable in UNCHANGED expression
   * variable in vars location

Note: assertion failure error already maps to PCal code location.
(But not if file has been edited since last translator run.)
    
The Structure of the Translation
--------------------------------
<translation> ::=
   <Variables Declaration> 
   <vars Definition>
   [<ProcSet Definition>]0,1
   <Init Definition>
   <Action Def>+
   [<Process Def>]0,1
   <Next Def>
   <Spec Def>
   <Termination Def>

<Action Def> ::=
   <label> ["(self)"]0,1 == 
   "/\" <PC enabling Predicate>
   <Action Body>

<Action Body> ::=
   [   "/\" <Expr> 
     | "/\" <Assignment> 
     | "/\" <If-Then-Else>
   ]*
   ["/\" <pc-assignment>]0,1  \* An outer-most action body must have a pc-assignment
   ["/\" <Unchanged>]0,1      

<Assignment> ::= 
   <Variable>
    "' ="
   [   <Expr>
     | "[" <Variable> "EXCEPT" "!" [ "[self]" ]0,1 
                                   [    "." <String>  
                                     |  "[" <Expr> "]" 
                                   ]*
       "]"
   ]
    
<If-Then-Else> ::=
   "IF" <Expr>
   "THEN" <Action Body>
   "ELSE" <Action Body>
           
<Unchanged> ::=
    "UNCHANGED <<" <Variable> ["," <Variable>]* ">>" 
  | <Variable> "' =" <Variable>

THE GRAMMAR OF ASTs.
-------------------
See PlusCal.tla

DATA STRUCTURE FOR MAPPING
--------------------------

CONSTANT Location ,  _<:_
  \* A set of locations in the file, where a location is a
  \* position in the module.  More precisely, it represents
  \* a position between two characters.  That position can
  \* lie either within the PCal source code or of its TLA+ 
  \* translation.
  \*
  \* A location will be represented by a record
  \*
  \*      [line : LineNumber, col : ColumnNumber]
  \* 
  \* where a location loc represents the position to the right of character
  \* number loc.col on line loc.line, with loc.col = 0 being the position
  \* to the left of the first character on the line.
  \*
  \* The relation <: is the "equals or is to the left of" relation on 
  \* locations.

Region == [begin : Location, end : Location]
  \* A region represents a region of text within the TLA+ translation

A mapping specifier is a sequence of the following objects:

TLAToken == [type : {"token"},
             region  : Region]
  \* This represents a section of text in the TLA+ spec

Paren == [type       : {"begin", "end"} ,
          loc : : Location]
  \* Matching parens delimit the region of PlusCal code between
  \* the two locations.  (I might be a 

            \* I don't think this is needed.
          pcalRegion : Seq(RegionLoc)]
  \* Matching parens logically contain the same pcalRegion
  \* values.  However, it might be most convenient to 
  \* put them only in the end paren.

Break == [type  |-> "break",
          depth |-> Nat]
  \* Indicates the existence of a region of PlusCal code that
  \* that is NOT part of the translation of a region of spec
  \* that contains the translation of parts of the spec on either
  \* side of the break.
  \*
  \* A depth of N indicates that if this break is at depth d,
  \* then it applies to all regions specified by parentheses of
  \* depth in d-N .. d



TransSpec 

A TransSpec specifier is an element of
Seq(TLAToken \cup Paren \cup {Break}) satisfying the following
conditions:

- For two successive TLATokens T1 and T2 (even if they have
  Parens or non-TLAToken objects between them), 
     T1.region.end :< T2.region.begin
- well formed (meaning all parentheses are in properly matched pairs)
- it begins/ends with begin/end Parens that delimit the
  PCal code of the entire algorithm.
- A break comes between a right and a left parenthesis
  (Not necessary, but breaks coming at other places are
  not meaningful.)

The Translation Algorithm
 - An output subsequence of a TransSpec is 
   a subsequence that is well formed and for which every TLAToken
   is inside parentheses.
 - The region of PCal code corresponding to an output region 
   is defined as follows:
     - if the output region contains no breaks at parenthesis 
       depth 0, then it begins at the location of the left paren 
       that begins the region and ends at the location of the right 
       paren that ends the region.
     - if the output region contains breaks at paren depth 0,
       then it is the union of the regions of PCal code obtained
       by the collection of output regions obtained by splitting
       the given output region at its paren-depth 0 breaks.

  
HOW PlusCal AST CONSTRUCTS ARE MAPPED
---------------------------------

In the following, parentheses represent Paren objects in the 
TransSpec.  Parentheses in the PCal source represent the locations
pointed to by the corresponding Parens in the TransSpec.

[abc] represents a TLAToken object for text "abc".  In this
representation, we put literal parentheses and square brackets in
quotes.

The Objects of the TransSpec are placed underneath the corresponding
parts of the TLA+ spec so that [abc] is underneath the text "abc".

Note that some text in the TLA+ spec does not have a corresponding
[...] object in the TransSpec.  As far as the mapping is concerned,
such text is equivalent to white space.

^^{n} represents a break with depth n


TLAExpr
-------
  PCal Source

  macro mac(param) {
    ...
   
    x   +   param   +   y   with: parameter param replaced by a + b
   ( ) ( ) (     ) ( ) ( )
    ... }
   ...
   mac( a   +   b )
       ( ) ( ) ( )

  Translation
     x     +    (   a     +     b   )    +     y'
  (([ ]) ([ ])  ( ([ ]) ([ ]) ([ ]) )  ([ ]) ([  ])




Assign with multiple SingleAssign children
------------------------------------------
  PCal Source

      x [ a ] := e    ||  x[b] := f ||    y := g    ||  x[c] := h
  ( (    ( )    ( ) )    (  ...    )   ( ( )  ( ) )    (  ...    )

  Translation
          /\  /\ x' = [ x EXCEPT 
                            ![a] = e, 
                            ![b] = f, 
                            ![c] = h ]
              /\ y' = g   

      /\  /\  x' =  [  x EXCEPT 
   ( [                          ]

                       !     [   a   ]  =    e     , 
                     ([ ]      ([ ])   [ ] ([ ]) )

                       !     [   b   ]  =    f     , 
                     ([ ]      ([ ])   [ ] ([ ]) )   
                      
                      ^^{0}
                  
                       !     [   c   ]  =    h        ]
                     ([ ]      ([ ])   [ ] ([ ]) )  [   ]
                      
           /\    y'    =   g   
        ( [  ] ([  ]) [ ] ( ) )
    )

        

Assign with one SingleAssign
----------------------------
  PCal Source
        x := 1
     ( ( )  ( ) )

  Translation
       /\    x'    =    1
     ([  ] ([  ]) [ ] ([ ])     
   
    or
       /\    x'    =   [     x    EXCEPT ! [ self ]  =    1     ]
     ([  ] ([  ]) [=     ] ([ ]) [                    ] ([ ]) [   ] )

  PCal Source
         x   [  a   ,    b  ]  :=  e
      ( ( )    ( )      ( )       ( ) )

   Translation
          x'    = [x EXCEPT ![     a    ,    b    ] =     e    ]  
      ( ([  ]) [               ] ([ ]) [ ] ([ ]) [    ] ([ ]) [ ] )

   or
          x'    = [x EXCEPT ![self][     a    ,    b    ] =     e    ]  
      ( ([  ]) [                     ] ([ ]) [ ] ([ ]) [    ] ([ ]) [ ] )



LabeledStmt
----------
  PCal 
     lbl :  Stmt1 ; ... ; Stmt42
   (       (     )  ...  (     ) )

  Produces

     lbl ==  /\ pc = "lbl"
  ( [                      ]

             Translation(Stmt1)
            (     ...          )
             
                  ...

             Translation(Stmt42)
            (     ...          )

             Translation(Stmt1)
            (     ...          )

            /\ pc' = "..."       \* Not present if Stmt3 is a goto
          [                 ]

            /\ UNCHANGED ...     \* May not be present
          [                 ]
   )


   Note: In the Exploded AST, the pc = "lbl" is obtained from an AST.When
         and the pc' = ... from an AST.Assign.


Call
----
  PCal Code
      procedure P(param1, param2)
      variable   pvar1 = e  ,  pvar2 = f
     (          (       ( ))  (       ( ) ) )
        { plabel: ... }
      ...
          call P( arg1 , arg2 ) ;
         (       (    ) (    ) )
   rlbl : ...

   Exploded AST for the Call:
     Assign object with:
       ass |-> << [lhs |-> [var |-> param1, sub |-> null or <<self>>],
                   rhs |-> arg1],
                  [var |-> param2, sub |-> null or <<self>>],
                   rhs |-> arg2],
                  [lhs |-> [var |-> stack, sub |-> null or <<self>>],
                   rhs |-> ...],  \* don't try to deal with this rhs.
                >>

     Assign object with:
       ass |-> << [lhs -> [var |-> pvar1, sub |-> null or <<self>>],
                   rhs |-> e] >>

     Assign object with:
       ass |-> << [lhs -> [var |-> pvar2, sub |-> null or <<self>>],
                   rhs |-> f] >>

     Assign object with:
       ass |-> << [lhs -> [var |-> pc, sub |-> null or <<self>>],
                   rhs |-> "rlbl"] >>

  Produces
         /\  /\ param1' =    arg1
   ( [                   ] ([    ])
   
             /\ param2' =    arg2
     [            ] ([    ])
   
             /\ stack' = ...
     [                       ]

         /\ pvar1' =   e     or    /\ [pvar1 EXCEPT ![self] =    e    ]
     ( ([           ] ( ) )      ([                          ] ([ ]) [ ])

         /\ pvar2' =   f     or  ...
       ([           ] ( ) )      ...
     )
        /\ pc' = ...   or [pc EXCEPT ![self] = ...]
     [                                              ]
   )


Return
------
   PCal Code
      procedure P(param1, param2)
      variable pvar1 = e, pvar2 = f
        { ... 
          return }
      ...
          call P(arg1, arg2) ;
   rlbl : ...

   Translation
      This produces a lot of stuff that, if selected, should
      map to the return.

CallReturn
----------
   PCal Code:
        call P(param1, param2);
        return

   Translation
      Essentially the same as for Call.


While
-----
  PCal Code
    lbl:   while ( e ) {  Stmt1 ;  Stmt 2 ;
   (   (          ( )    (     )  (      )  ) ^^{1}

                          lbl2 : ...
                     };

           Stmt3 ;
       (  (      )

           Stmt4:
          (      )
       )
   )

    lbl3: ...
  
  Translation
     lbl ==     /\ pc = "lbl"
  ( [      ] ( [              ]              

                /\ IF    e
               [     ] ([ ]) 

                     THEN   Trans(Stmt1)
                    [    ] (   ...      )

                            Trans(Stmt2)
                           (            )

                          /\ pc' = "lbl2"
                        [                 ]

                          /\ UNCHANGED ...
                        [                  ]
              ) ^^^{1}

                     ELSE    Trans(Stmt3)
                    [    ]  (   ...      )

                             Trans(Stmt4)
                            (    ...     )

                          /\ pc' = "lbl3"
                        [                 ]

                          /\ UNCHANGED ..
                        [                 ]


NOTES
-----
- If the translator is modified to use a single TLA+ variable for
two different local PCal variables of the same name, then a variable
name in the TLA+ spec does not map to a unique piece of PCal code
in the <Variables Declaration> and <Init Definition>.  And additional
information will need to be kept to map variable names to the correct
PCal declaration for cases where there is a unique mapping.

- For a multi-assignment such as 

   x[i] := ... || x[j] := ...
   
the <Variable> of an <Assignment> does not correspond to a unique
occurrence of the variable in the PCal code.

- Among the stuff added in the translation are parentheses around expressions.

- The definition section should be handled by a 1-1 mapping between an area 
  of the spec and an area of the code.  That must be fit into any framework.

- Portions of the AST that result from macro expansion can be 
  indicated by a new AST subclass AST.MacroMarker whose objects
  mark the beginning and end of macro expansion, containing the
  location in the PlusCal code of the beginning and end of the
  macro statement. I don't think it needs to indicate the location
  of the arguments.
