1. Add way to tell if spec on which a model was last run is the same as the current
   spec.
   
2. For some reason, the toolbox didn't seem to notice when the Additional Definitions 
   fields was changed.  Even though the editor's tab had a star next to it, trying to
   save the model did nothing, and hitting the launch button produced an MC.tla file 
   with an obsolete version of the field.  I had to type something into the field
   to make the toolbox notice the change and allow me to save the model.
   
3. The toolbox doesn't parse the TLC output correctly in simulation mode.  In particular,
   it didn't notice that an invariant had been violated and didn't raise the error
   window.
   
4. The progress information is not being displayed.
   
5. If the user adds or removes a declared CONSTANT from the spec while a model is
   being run by TLC, that changes the model.  For example, if the spec is run with
   a constant N instantiated with 42 and N is removed from the spec, then the N <- 42
   disappears from the model and the user has no way of telling what N was instantiated
   with during the current run.
   
   Here is a possible solution:  Add the notion of a model being LOCKED, meaning that
   it cannot be changed in any way, meaning that it is read only and it doesn't 
   change to conform to the current spec.  In particular, it conforms to the copy of
   the spec that's salted away with the model.  Running the spec locks the model.
   There will also be a menu item that the use can select to lock the spec himself.
   (This will allow the user to protect himself from accidentally modifying or re-running
   a spec by mistake--perhaps losing a trace that took weeks for TLC to produce.)
   We must decide what should happen to the lock state when a TLC run completes.
   Should the user have to explicitly unlock it?  I suggest that it be unlocked when
   the run completes if and only if that run did not take too long--where "too long" is
   a user-settable preference. 
   
6. Checkpoint restoration is not implemented.

7. Coverage is not working, coverage information being displayed only after a run 
   completes.  The bug is in TLC, which isn't printing the coverage information. 
   
8. A definition override of an operator with no arguments should include the
   option of making it a model value.  (This is not a show-stopper because the
   user can replace it by a model value that he declares in the model-value
   section.)
   
9. There is no reason why the user cannot use the same model value in two
   different constant instantiations or in a constant instantiation and a 
   definition override.  This is not a show-stopper because it now works
   if the user uses all but one instance of the model value as an ordinary value.
   
10. If I close the TLC Error window, there is no way to re-open it.  This is
    a major problem.  Imagine someone accidentally doing that on an error window
    produced by a 2-week run.  (This may be an error added in testing by Dan R
    and LL.)
       
   