2. BUG - SEEMS TO HAVE BEEN FIXED (7 Oct 2009)
   For some reason, the toolbox didn't seem to notice when the Additional Definitions 
   fields was changed.  Even though the editor's tab had a star next to it, trying to
   save the model did nothing, and hitting the launch button produced an MC.tla file 
   with an obsolete version of the field.  I had to type something into the field
   to make the toolbox notice the change and allow me to save the model.
   
3. BUG (Running TLC in Simulation mode) - FIXED by Dan 13 Oct 2009
   The toolbox doesn't parse the TLC output correctly in simulation mode.  In particular,
   it didn't notice that an invariant had been violated and didn't raise the error
   window.
   
4. BUG (Progress Information) - FIXED by Dan (9 October 2009)
   The progress information is not being displayed.
   
6. MISSING FEATURE -- SEEMS NOW TO BE IMPLEMENTED (7 Oct 2009)
   Checkpoint restoration is not implemented.

7. TLC BUG (Coverage) -- FIXED (9 Oct 2009)
   Coverage is not working, coverage information being displayed only after a run 
   completes.  The bug is in TLC, which isn't printing the coverage information. 
   
   8. IMPORTANT MISSING FEATURE  (Definition Override) ADDED by Dan (16 Oct 2009)
   A definition override of an operator with no arguments should include the
   option of making it a model value.  (This is not a show-stopper because the
   user can replace it by a model value that he declares in the model-value
   section.)
   
10. BUG (TLC Error View) -- FIXED BY DAN Oct 2009
    If I get a TLC error and close the TLC Error view, reopening it with
    the TLC Model Checker/ TLC Errors menu option produces a blank error
    window.  I have to click on the Errors Detected field to get
    the right TLC Errors view.
    
11. MINOR BUG (Parsing Error View) - MOSTLY FIXED BY DAN 10 Oct 2009
    The Parsing Error item on the Window menu should be disabled when there is no 
    parsing error.
    
14. SHOW-STOPPER SANY BUG - FIXED 7 October 2009
    SANY2 does not correctly parse an expression containing a "<" immediately followed
    by a number.  This is undoubtedly a lexing error, the lexer thinking that
    it is finding the beginning of a proof-step number.
       
16. NOT A PROBLEM
    My Stupidity

23. SAME AS 9
        
24. BUG FIXED ON 1 OCT 2009 by Simon
    Definition override validator is not allowing the re-use of definition parameters.  
    For example, if you override
    
        foo(a) <- <<a>>
        bar(a) <- {a}
     
    the validator complains about the use of the parameter a in the definition of 
    bar.  It shouldn't.

25. SIGNIFICANT BUG -- FIXED 8 October 2009
    The toolbox would get into a mode such that you have to open a spec twice to get 
    something other than a blank editor window.  As of 7 Oct 2009, this hadn't 
    happened in a couple of weeks, so some other change may have fixed it.
     
26. MINOR BUG -- APPEARS TO HAVE BEEN FIXED (8 October 2009)
    Each time the user closes and reopens the toolbox when there are errors from TLC, 
    the number of errors increases each time by the number of actual TLC errors on 
    the model.
    
30. MINOR BUG (TLC Error View)
    When I close a spec that has the TLC Error window raised and then
    open a new spec, the TLC Error window is raised again.  If that window
    shows an error, then it shows the same error when the new spec is
    opened.
    
31. BUG (Definition Override) - FIXED by Dan 15 Oct 2009
    If a model contains a definition override and the defined symbol is
    removed from the spec, the override is not removed.  Moreover, in that
    case trying to run TLC on the model does nothing--it just logs "Skipping
    resource" messages for the MC file and the spec's root file.  I expect
    that we just have to add to the validate method a check that every defined 
    symbol is still defined with the same number of arguments.  If it's no
    longer defined, we should just remove the override.  If the number of
    arguments has changed, we should report an error.
    
33. FEATURE (TLC error reporting)
    When TLC returns an error stack trace, make clicking on the locations
    highlight and go to those locations in the module.
    
34. FEATURE (Stack trace)
    Make clicking on the action location highlight and go to that location.

37. MINOR BUG (TLC Error report) - DONE DR 10/12/09
    Here's how to produce the bug:
    Create a new spec that just declares a single variable x.  Create a
    model with the spec defined by letting Init be x=0 and Next be x’=x.  Add
    the invariant x=1 and run the model.  Look at the model overview page.  It
    looks fine.  Now change the invariant to x = "a" and run it again.  This
    time, the model overview page puts the TLC error report at the top of
    the page, where it should say something like "1 error".
    
38. BUG (Validation of model) -- FIXED BY LL on 11 October 2009
    The code to validate the use of symmetry in MainModelPage.validatePage
    was bogus.  I therefore commented out the test.  (See line 330, or look for
    the dead code in the if(false).)  Here's what should actually be checked.
    Define the symmetry model values to be the set of all model values that
    appear in sets of model values that are declared to be symmetric in the
    constant instantiatiions.  TLC will produce an error if there are two
    symmetry model values having different types--that is, both typed and having
    different types.  This will occur if the user instantiates a constant
    with a set of model values including A_c and B_d that is declared to
    be symmetric, or if he declares two different sets of model values to be
    symmetric, and one include A_c and the other include B_d.  This is what
    the validatePage method should check for.
    
41. BUG (View option)
    This option is not implemented.

42. IMPORTANT MISSING FEATURE (Specifying Java heap size) - DONE DR 10/12/09
    The user should be able to specify the number N of megabytes of storage
    alloted to the Java heap when running TLC.  TLC should be run with
    Java getting the argument -XmxNm.
    
44. MINOR BUG (User Output field of Model Check Results page) - FIXED by Dan 19 Oct 2009
    The output of the parsing phase should not be put
    under "User Output".   It should go under Progress output.  Let's try
    to put only output created by Print commands in the User Output section.
    
47. MINOR FEATURE (Default JVM heap size)
    Add a TLC Model Checker Preference that specifies the default JVM
    heap size for a new model.
    
48. MINOR BUG (Generating MC files) - FIXED by Dan 16 Oct 2009
    Create a spec with a variable and some specification Spec.  Run it, specifying
    Spec as the specification formula. Now delete the variable from the spec (but don't
    delete the Spec from where you typed it) and verify the model.  The toolbox is still
    generating putting the specification Spec into the MC files.
    
49. BUG (Displaying Parser errors)    
    I stupidly thought it was impossible for there to be a parser error
    in a standard module.  Here are two ways it can happen
  
           a + b == ...
           INSTANCE Naturals
           
    and
    
           EXTENDS Foo, Naturals
           
    where Foo defines + .  When it encounters such an error, the Toolbox
    throws an exception because it can't find the resource corresponding
    to the Naturals.tla file.  The solution is for the Toolbox to to check
    if a parsing error is in a standard module and, if it is, it should
    not produce an error marker nor should it link the error message in
    the Parse Error view to the module.  It should just display the error
    in the Parse Error view.  Also, since there is no error marker, in
    that case it should raise the Parse Error view even if the preference
    says that it shouldn't.  (If this is not easy to implement, don't bother
    with it.)
    
52. FEATURE CHANGE (Parser preferences)
    - Comment out the "Automatic re-parse all module dependent 
      files (experimental)" TLA+ Parser preference.
    - Disable the "Re-parse specification on spec module save"
      parser preference unless the "Re-parse module on save"
      option is selected.
    
55. BUG (Checkpoint recovery) - FIXED by Dan 20 Oct 2009
    When the user runs a model long enough to have checkpointing occur
    and then cancels the model checking before it terminates on its
    own, it is not possible to recover from the last checkpoint. The last
    checkpoint is being accessed through the method ModelHelper.getCheckpoints().
    There may be an issue with synchronizing eclipse's representation of the
    workspace with the actual file system, because that method is not finding
    the checkpoint files even though they exist. Once the user closes the toolbox
    and re-opens, the last checkpoint ID appears.
    
56. BUG (Parsing Error view) - FIXED by Dan 21 Oct 2009
    If the "Automatically pop up error view" preference is NOT selected
    and there is a parsing error, the error parsing status is set, but
    the Parsing Error view selection on the Window menu is disabled, so
    it's impossible to find out what the error is.  
    
    This may or may not be related, since it happens even when the
    Parsing Error view is automatically popping up, but parsing a
    spec with an error causes a null pointer exception in AdvancedModelPage.java, 
    line 347.  But why on earth is that being called by parsing the
    spec?  (It occurs when parsing is invoked from the menu, not just
    by saving the spec.)
    
58. BUGS (TLC model) - FIXED by Dan 21 Oct 2009
    - When delete the model, the model folder should also be deleted.
    - Error 2125 should be recognized and reported when it occurs, and
      the Toolbox should notice that it ends the TLC run.  Are there
      any other errors in which TLC stops without doing so in a way that
      makes the Toolbox notice that it stopped on an error?
    - The MC.out file should be deleted when launching a TLC run.
    (this already occured)
    
59. FEATURE (TLC Result page) - IMPLEMENTED by Dan 21 Oct 2009
    The "General" section of the TLC Results page should include a
    "TLC Status" field, which has one of the following values:
      1. not running
      2. computing initial states
      3. recovering from checkpoint
      4. computing reachable states
      5. checkpointing
      6. checking liveness   
    The possible state changes are:
       1 -> 2 -> 4 <-> 5 
        \         \
         -> 3 ->    -> 6 -> 1 
    Note that TLC will print out a message saying something like
    "Checking temporal properites of CURRENT state space" when
    it's in state 4.  Those messages should be ignored.
    
60. MINOR BUG (Model Validation)
    When the model is validated and finds an error, the existence
    of that error should be reported at the top of all the pages--or
    at least at the top of the current page.  Now, the user can type
    something on one page that causes an error on another page and
    have no idea what's going on.
    
 61. BUG (Progress statistics) - FIXED by DAn 23 Oct 2009
    The Toolbox is not printing the "progress statistics" (number
    of states found) that TLC prints when it successfully completes.
    
 65. MINOR BUG (Constant substitution & definition override)
    If I try to substitute for a constant when the spec is unparsed,
    I get a null pointer exception at
    	ModelHelper.getOpDefNode(ModelHelper.java:1350)
    from the call at
        AssignmentWizardPage.createControl(AssignmentWizardPage.java:117)
    I didn't check at which point in the expression the null pointer
    occurred.  Anyway, the getOpDefNode method should return null in 
    this case.  The createControl method tests for a null value, so I 
    presume it can handle it.  The getOpDefNode method is also called
    in ValidateableOverridesSectionPart, and the same null pointer
    exception can arise when trying to modify an override when the
    spec isn't parsed.  However, that call doesn't test the 
    returned value for null.
    
69. MINOR BUG (blank and empty expression fields)
    Entering space characters in various fields of the model editor
    that should have expressions creates errors that 
    looks mysterious and can be hard to figure out.  For example, 
    look at what happens if you type a blank Action Constraint and 
    validate the model.  Or if you create an invariant and leave the
    field blank.  Typing just blanks in any field like Action Constraint
    should be equivalent to not typing anything.  In something like an
    invariant or a definition override, a blank or empty entry should
    be treated as if the user canceled the operation.  (The one place
    it doesn't matter is in the Additional Definitioins section.)
    
70. BUG (View option)
    The View option on the Advanced Run section is being ignored.
    
73. BUG (Opening TLC error view on Linux)
	Opening the TLC error view on Linux causes the program to enter
	an infinite loop. In particular, in the method controlResized()
	in the nested class TraceDisplayResizer in TLCErrorView, the
	do-while loop never terminates on Linux. For some reason,
	the condition hbar.isVisible() always returns true. At some point,
	it would be nice to find a more standard solution to the problem,
	but if a quick fix is needed, a counter could be used to cause the
	loop to terminate after some fixed number of times.