Version: $Id$

MISCELLANEOUS THINGS TO DO
--------------------------
When calling the parser or some other program, display what's being
called and provide a method for canceling it.  (This is useful even
for fast-running programs such as the parser, in case the program
hangs.)

Make the file browser menu list things in alphabetical order by
file/folder name.

Make the toolbox window start at the same size as it was the last time
it was closed.

INITIAL PERSPECTIVE
------------------
This is the perspective one gets when calling the toolbox with no argument.

OPERATIONS

Open Spec:
  Opens an existing spec, changes to SPEC-OPEN Perspective.
  Input: Choose name of spec 
  
New Spec:
  Creates a new spec, changes to SPEC-OPEN Perspective. 
  Input: Choose root-module file, which must be different from
           that of any existing spec. 
         Choose name of spec, which must be different from that 
           of any existing spec.

Delete Spec:
  Delete an existing spec.  Warn user that this does not delete the spec's files--perhaps
     with "don't show this warning again" option.
  Input: Choose name of spec
  Should this delete the file containing the Toolbox's metadata for the spec?  Probably.
     
Rename Spec:
  Input: Choose existing spec.
         Enter name of spec, which must be different
           from that of any existing spec.

[Change Root File:
   Input: Choose existing spec.
          Choose root-module file.

 This probably is performed from the SPEC-OPEN Perspective,
 and perhaps from other descendant perspectives
]

Open Calculator:
  Open the calculator tool, which is a special mode of the TLC tool in which
  there is no spec, and TLC is used only as a math calculator to evaluate 
  expressions.  
-----------------------------------------------------------------------------
  Input: The user might want to specify a directory in which to put the 
         calculator's files (probably only the first time the operation 
         is performed).  However, it would probably be best to use either 
         a standard tmp directory or else the directory in which the 
         toolbox keeps its pickled spec-independent data.  

         The user might also have the option of continuing the calculator 
         from the state in which it was last left.  (The reason for
         doing this is to re-use definitions that were made last time.
         There is no need to keep named calculator instances because the 
         user can just create a named spec and run do the calculations
         from that spec.)

Exit:
  Saves current set of specs and customizations

Help:
  Standard operation on all windows, to be specified elsewhere


PRESENTATION

The window's name field contains the text
  "TLA+ Toolbar" (possibly as an icon if I can think of one)
  "Choose Specification"

A menu bar with the following selections:

  name      function
  ----      -------
  Open   :  Presents a list of existing specs, sorted with most recently
            used first.  Performs Open Spec for the one chosen
  New    :  Pops up New Spec window
  Manage :  Presents a list of existing specs, sorted with most 
            recently used first.  Choosing one pops up Manage Spec window
            for that spec.
  Exit   :  Exit
  Help   :  Pops up help window
  [Calculator : Performs the Open calculator operation.  
                However, a better idea would probably be to have a dummy
                Calculator spec that performs this action when opened.]

Another possibility is to make Open/New/Manage/Exit subitems of a single
File menu item.

SUBWINDOWS

New Spec:  
  Provides file browser to choose a root module.  After file is chosen,
  a text-line entry area is enabled for choosing the spec name; it is
  initialized with the root module's name (unless a spec by that name
  already exists).

  Should also provide the ability to set the default directory that
  the New Spec window's file browser opens to.

Manage Spec:
  Implements Delete Spec and  Rename Spec [ and Change Root File ]
  for the chosens spec.

-----------------------------------------------------------------

SPEC-OPEN PERSPECTIVE
---------------------

This is the perspective one enters either from the Initial
Perspective, or when the toolbox is started with the spec name or the
root-module file as argument--e.g., by double clicking on the .tla
file.  If a non-existent spec name is provided, then the toolbox opens
in the Initial Perspective with the editor window showing an error
message.  If the specified root module is not the root module of an
existing spec, then the toolbox opens in the same state as if a New
operation had been performed in the Initial Perspective and the
root-module file had just been chosen.

There can be multiple windows open with this perspective.  Each window
can contain some number of frames, each displaying an editor of a
file.  (Initially, we may choose to limit the number of frames per
window to 1.)  

The first frame created, which holds the root module, is called the
ROOT FRAME.  The window containing the root frame is the ROOT WINDOW.

------------------------------------------------------------------------
Some thoughts of LL on 15 Jan 08:

Spec state:
  Parse Status: parsed / error / warning /unknown
     Set to parsed/error/warning by parsing root file:
     Changes parsed -> unknown when a file in LastKnownSpecFiles
       is modified.

  LastKnownSpecFiles: 
     Set to the set of all non-standard files that are part of
     the spec when the root file is successfully parsed.


File state:
  Modification:         Modified / Unmodified
  Status of Last Parse: successful / error / warning
  ImportedFiles:        A set of files / ?
    Set to the set of all imported files by a successful parse
      of this file.
    Set to ? when this file or any file in ImportedFiles is modified.
  IsSpecFile:           yes / no / ?
     Set to yes/no by successful parse of root file.
     Set yes/no -> ? when any file is modified that has this file
       in its ImportedFiles 
------------------------------------------------------------------------

OPERATIONS

Edit:  
  A suite of editor commands consisting of standard ones
  like cut and paste, plus ones common to lots of structured editors,
  including:
    - Name completion
    - Go to declaration of selected name.
    - Find all uses of selected name.
    - Commands to aide formatting of comments (in any one of
      several plausible styles).
    - Commands to aide in typing standard constructs, such as:
        - bulleted lists of con/disjunctions.
        - CASE expressions
        - IF/THEN/ELSE expressions
  The editor will also handle a +Cal algorithm in the module.  The effects
  of certain commands will therefore depend on whether or not the user is
  typing in the algorithm or elsewhere.


File Commands:
  - Open in New Window / in new Frame / in place of current file,
    with option of opening a read-only frame and the option
    of having that read-only frame show a pretty-printed version
    using Acrobat or something (not a high-priority feature).
  - Close (cannot be performed to the window or frame containing
    the originally opened copy of the root module)
  - Rename
  - Save a Copy (under a different name or perhaps with some
    different extension).
  - Re-read from disk
  Opening a new file in the root frame or renaming the file in the
  root frame changes the spec's root file.  Therefore, such an 
  operation requires user confirmation.  Also, opening a file
  from a different directory should be allowed only for the root frame;
  doing so should kill all other frames.

Parse: 
  Call the +Cal translator and/or the SANY2 parser and present
  to the user any errors that it produces.
  Input: Whether to call the +Cal translator and if so, what file
         to call it on.  If the +Cal translator is called, whether
         SANY2 should also be called.  At least part of this input
         could be implicit, depending on the mode with which the
         editor is displaying the file--in particular, if it is
         displaying only the +Cal algorithm.

Open Tool:
  Start the appropriate tool.
  Input: Choose a tool.
  A tool will implement a Tool interface.  Starting the tool simply
    calls a Startup method of that interface.  
    

Close Spec:  
  - Closes all files, giving the user the option of saving any modified files.  
  - Save all data associated with the spec (in a file within the directory).
  - Kill all windows other than the root window.
  - Go to the Initial Perspective.


Exit:
  Performs Close Spec operation followed by the Initial Perspective's 
  Exit operation.

Customize Editor Fonts
   Select the style, size, and color of the various fonts and the
   background color.  Indicate if the choice is 
     - for this file only
     - for all files of the spec
     - for all files of all specs

Customize Editor View:
   Select things like
    - The default line width.
   (Are there any other such things?)   

Customize Editor Actions:
   Select things like:
     - shortcut commands
   (what else?)

Help:
  Standard operation on all windows, to be specified elsewhere
  One idea: In the help window, have an option that helps the
    user find really tough parse errors by inserting "====" before CONSTANT, 
    THEOREM, VARIABLE,  ASSUME, and definitions not contained in LET ... IN, 
    to find the longest correct prefix.

DISPLAYED DATA
- The parsing status of the spec.  Possibilities:
    Never parsed.
    Parsing Error Detected
    Parsed Correctly.
- Whether file (excluding comments?) has changed since the last
  time it was parsed.
    
- The translation status of +CAL algorithm algorithm (if the module
   in the currently selected frame has one), and whether or not
   the algorithm has been edited since that status changed.

PRESENTATION

The window's name field contains the text
  "TLA+ Toolbar" (possibly as an icon if i can think of one)
  "Specification" <specification name>
  "Module" <module name>  
     [This field does not appear if the window contains multiple frames
      or if it contains only the root frame and the root file's name
      is the same as the specification name.]
  If there are several open toolbox windows with this perspective, then
  the one containing the root frame should be marked in some way.

A menu bar with the following selections.  What they do depend on what
frame is selected.

  File:   For the File Commands.  Also presents a Close 
          option for the Close Spec Operation and an Exit
          option for the Exit operation.
     
  Edit:   The usual menu option for editing functions.
          Probably also the customize operations.

  Parse:  Performs the desired parsing action.  If the selected
          frame contains a +Cal algorithm, the user has the option
          of just translating the algorithm, just parsing (the entire spec), 
          or of translating and parsing.  The choice might depend on what
          mode the editor is in.  For example, if it's in the mode in which
          just the algorithm is shown, "parse" might mean just translate.
          Ideally, the translation options would not be enabled unless the 
          algorithm or its translation had changed.

  Tool:  Presents a drop-down menu of available tools.  The currently
         envisaged ones are TLC and the Proof Manager.  

  The root window's default close button (the one with the "x" in the 
  right-hand corner) performs an Exit operation.
  Any other window's default close button performs a close operation
  for every frame of the window and kills the window.

The menu bar will also display the DISPLAYED DATA in some way.

=============================================================================

TOOLS

Here are the methods of the Tool interface:


Startup:
  Starts the tool.  Arguments are:
  - The specification
  - A pickle, which is a serializable object that contains the information that
    the tool itself wants to save between invocations and that is not
    associated with a specific spec--for example, customizable defaults.
    It will be null the first time the tool is called.


Pickle:
  Returns a serializable object that contains the information that
  the tool itself wants to save between invokations and that is not
  associated with a specific spec--for example, customizable defaults.

The ToolBox provides the following methods for use by the Tool

Exit:
  Called by the tool after it is through.
  Arguments:
  - A Pickle, which is the argument with which Startup will be called
    the next time the user invokes the tool.
  - A description of what the toolbox should do next, which will be
    either: Enter SPEC-OPEN perspective, close current spec, or 
    close current spec and exit toolbox.

================================================================================

TLC STARTUP METHOD.

OPERATIONS
- Choose a model 
   The user can choose to open either an existing model or a new one.
   The new model is either a brand-new (empty) model or a clone of an
   existing model.

- Go to the TLC Perspective in the window(s) containing the editor(s).


PRESENTATION

Probably raise a window that explains what the user's choices are.
There will be an option (remembered by the tool) ffor whether to raise
a big window that explains things or a small window.

-----------------------------------------------------------------------------
TLC MODEL PERSPECTIVE


OPERATIONS
Edit:  
File Commands:
Parse:
Customize...
  The same as for the Open-Spec Perspective.

Managing Models:
  Delete/Rename a model.
  Choose a model.
    This closes the current model and chooses a new one, as in the TLC 
    Startup method.

Specifying TLA+ Parameters:

The tool creates a new module called the MC module that EXTENDS the
root module.  The contents of that module are determined by the TLA+
parameters specified by the user.

For calculator mode, there is only the MC module.  Only some
operations can be performed in calculator mode; these are marked
[calculator].

The following operations are only enabled only if the module has been
correctly parsed (except, of course in calculator mode).

- Specifying the Spec
  There are two basic ways to specify the Spec:
  1. By writing the specification 
  2. By specifying:
     - The Initial predicate.
     - The Next-State relation.
     - A liveness formula and/or 
        A collection of weak or strong fairness conditions on actions.
       
  The second way is preferred, because it is necessary to enable certain 
  types of debugging operations.

  In all cases, one specifies a formula by writing an arbitrary formula.
  The default choices for the spec, the initial predicate, and the next-state
  relation are the ids Spec, Init, and Next if they are defined.
  (A better option, perhaps a bit more difficult to implement, is to
  let the defaults be the shortest defined ids beginning with Spec, Init,
  and Next.)

- Specifying what to check
  One can specify any of the following:
      Invariants
      Action-Invariants
      Arbitrary Liveness Properties
      Implemented properties.  These are temporal properties that show
        that the current spec implements some other spec, described
        without using temporal logic.  The user must specify:
        - the set of implemented variables   [required]
        - the implemented next-state action  [optional]
        - a collection of weak or strong fairness properities
          of specified actions [optional]


- Specifying Model Values  
  The user will enter all model values that he wants to use (except
  ones described in Specifying Constants, below).  The presentation
  should lead the user to discover that there are now typed model values,
  which Help will tell him about.  Each model value m will be declared to
  be a CONSTANT in the MC module, and will produce a substitution m = m 
  in the cfg file.

- Specifying constants.
  For each ordinary (non-operator) constant declared in the spec, the
  user has the following options:
     1. Enter an expression that will be substituted for the constant.
     2. Make the constant a model value.  (That is, replace the constant
        C by the model value C -- which need not be among the model 
        values specified explicitly.)
  In case 1, assigning exp to constant C will put the definition MC_C == exp 
  in the MC module and C <- MC_C in the cfg file.

  For each operator constant C(_, ... , _) declared in the spec, the
  user has the following options:
     1. Enter a definition for C.
     2. Indicate that C is to be replaced by some already-defined operator
        (which must have the right arity).
  In case 1, the user will enter argument parameters (one for each of the 
  "_"s in the declaration) and a definition, and an operator MC_C will be 
  defined in the MC module, much as for ordinary constants.

  Note that a spec can contain CONSTANT _ ++ _ so this syntax must be dealt
  with by the interface.

- Specifying Replacements
  The user may "redefine" existing constant operators.  He will specify the
  name of the operator, which must exist, and the module [the default being
  the root module?].  He will then be given the same options as for specifying 
  a constant.

  The tool will find all constant defininitions of the form

       id == CHOOSE vbl : vbl \notin expr   or
       id == CHOOSE vbl : ~(vbl \in expr)

  and for each of them will create a default replacement of id with a model 
  value.  The user can delete this default replacement.

  Note: To replace a constant Foo from a module M with a defined operator Bar, 
  you can write something like Foo <-[M]- Bar in the cfg file.  (It's fine
  to write Foo <- Bar if M is extended rather than instantiated.  However,
  I'm not sure what that does if M is both extended and instantiated.  This
  should be tested.)  I believe that Bar must
  be defined in the root module, which if module M is instantiated means that 
  one is replacing something defined in one context with something from another
  context.  This makes sense because the execution is being performed in the
  context of the root module.  This needs to be thought about carefully and
  any problematic cases tested.

- Specifying Definitions [calculator]
      The user can make definitions that are added to the spec for the
      purpose of debugging -- that is, added to the MC module.  The tool
      must be checked that any added definitions are of symbols that
      don't already have a meaning.

- Specifying modules to extend. [calculator]


- Specifying Debugging Options
    The possible debugging actions are:
       - Print [calculator]
       - Stop and print execution trace.
    They can be triggered by one of two things:
       1. Evaluation of a particular expression in the spec.
       1a. Evaluation of a particular expression the user entered
           as replacement for a constant or in a definition.
           This is useful mainly for calculator mode, and 
           we need to think carefully about what the user needs 
           and whether we need to generalize case 1 to handle
           the MC module like other modules. [calculator]
       2. A condition being true, where the condition is either
          a state predicate or an action.
    In case 1, the implementation requires modifying the source module.
    The modifications must be made in such a way (by suitable use of comments)
      that the original unmodified module can be reconstructed automatically.
      This is necessary in case the toolbox crashes.  The best way to do this
      is to put at the beginning or end of the file the commands needed to
      reconstruct the original file, so the toolbox itself will reconstruct
      the file when it opens the spec, regardless of what tool made the
      modifications.

Running TLC:
  Here are some of the different ways in which TLC can be run.
  1. Model Checking mode
  2. Simulation Mode
  3. Evaluation mode, in which one can evaluate either
     (a) A state predicate in a specified state.
     (b) A transition predicate in a specified pair of states.
     (c) A constant expression.  [constant]

DATA DISPLAYED
 - Warning if there are Missing Run OptionsXS
 - Warning if the TLA+ properties specified by the user are not consistent
   with the spec because the spec has changed since they were entered.
   (For example, a new CONSTANT may have been added, or the arity of an
   existing constant or replaced operator may have changed.)
 - Data displayed while running TLC.  This will probably be shown in a
   separate window.  It includes the following:
    - The number of states/new states found and their history (as graphs)
    - The number of states on the queue and its history (as a graph)
    - coverage information [optional]
    - amount of disk space currently used.

